class Node {
    int key;
    Node left;
    Node right;

    Node(int key) {
        this.key = key;
        left = right = null;
    }
}

class BST {

    public static Node insert(Node root, int key) {
        if (root == null)
            return new Node(key);
        if (key > root.key)
            root.right = insert(root.right, key);
        else if (key < root.key)
            root.left = insert(root.left, key);
        return root;
    }

    public static void inOrder(Node root) {
        if (root != null) {
            inOrder(root.left);
            System.out.println(root.key);
            inOrder(root.right);
        }
    }

    public static void preOrder(Node root) {
        if (root != null) {
            System.out.println(root.key);
            preOrder(root.left);
            preOrder(root.right);
        }
    }

    public static void postOrder(Node root) {
        if (root != null) {
            postOrder(root.left);
            postOrder(root.right);
            System.out.println(root.key);
        }
    }

    public static Node deleteNode(Node root, int key) {
        if (root == null)
            return root;
        if (key < root.key)
            root.left = deleteNode(root.left, key);
        else if (key > root.key)
            root.right = deleteNode(root.right, key);
        else {
            if (root.left == null)
                return root.right;
            if (root.right == null)
                return root.left;
            Node succ = getSuccessor(root);
            root.key = succ.key;
            root.right = deleteNode(root.right, succ.key);
        }
        return root;
    }

    public static Node getSuccessor(Node curr) {
        curr = curr.right;
        while (curr != null && curr.left != null)
            curr = curr.left;
        return curr;
    }

    public static void main(String[] args) {
        BST tree = new BST();
        Node root = null;
        root = insert(root, 50);
        root = insert(root, 30);
        root = insert(root, 20);
        root = insert(root, 40);
        root = insert(root, 70);
        root = insert(root, 60);
        root = insert(root, 80);
        
        System.out.println("In-order traversal:");
        inOrder(root);
        
        System.out.println("\nPre-order traversal:");
        preOrder(root);
        
        System.out.println("\nPost-order traversal:");
        postOrder(root);
        
        System.out.println("\nDelete node 20:");
        root = deleteNode(root, 20);
        inOrder(root);
        
        System.out.println("\nDelete node 30:");
        root = deleteNode(root, 30);
        inOrder(root);
        
        System.out.println("\nDelete node 50:");
        root = deleteNode(root, 50);
        inOrder(root);
    }
}
